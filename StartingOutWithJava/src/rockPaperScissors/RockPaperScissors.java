/*
 * Ronny Rosabal
 * Programming Fundamentals II
 * COSC 1337 2001
 * 11.2.16
 * Sets all the rules and parameters for the Rock Paper Scissors game.
 */

package rockPaperScissors;
import java.util.Random;
import javax.swing.JOptionPane;

public class RockPaperScissors {
	
	
	// VARIABLES
	private int userInput,										// holds the input of the user
				compInput,										// holds the randomly generator input for the computer
				userWins,										// holds the user's number of wins
				compWins,										// holds the computer's number of wins
				draws,											// holds the number of draws
				totalGames;										// holds the total number of games
	private String [] options = {"Rock", "Paper", "Scissors"};	// holds the name of the three options
	private String userSelection,								// holds the string option selected by the user
				   compSelection,								// holds the string option generated by the computer
				   winner;										// holds either "user", "comp", or "draw"
	Random randSelection;										// holds a random object
	
	
	
	// CONSTRUCTORS
	public RockPaperScissors(){
		userWins = 0;
		compWins = 0;
		draws = 0;
		totalGames = 0;
		randSelection = new Random();
	}
	
	
	
	// ACCESSORS
	/**
	 * getUserInput returns the integer value given by the user
	 * @return the value given by the user
	 */
	public int getUserInput(){
		return userInput;
	}
	
	/**
	 * getUserInput returns the integer value generated by the computer
	 * @return the value generated by the computer
	 */
	public int getCompInput(){
		return compInput;
	}
	
	/**
	 * getUserWinds return the number of times the user has won
	 * @return number of user wins
	 */
	public int getUserWins(){
		return userWins;
	}
	
	/**
	 * getCompWinds returns the number of times the computer has won
	 * @return number of computer wins
	 */
	public int getCompWins(){
		return compWins;
	}
	
	/**
	 * getDraws returns the number of times the game was a draw
	 * @return number of draws
	 */
	public int getDraws(){
		return draws;
	}
	
	/**
	 * getTotalGames returns total number of games played
	 * @return
	 */
	public int getTotalGames(){
		return totalGames;
	}
	
	/**
	 * getUserSelection returns the user's selection as a string
	 * @return the user's selection
	 */
	public String getUserSelection(){
		return userSelection;
	}
	
	/**
	 * getCompSelection returns the computer's selection as a string
	 * @return the computer's selection
	 */
	public String getCompSelection(){
		return compSelection;
	}
	
	/**
	 * getWinner returns a string of who won the last match
	 * @return the winner of the match
	 */
	public String getWinner(){
		return winner;
	}
	
	
	
	// MUTATORS 
	/**
	 * setUserInput sets the integer input given by the user
	 * @param userInput
	 */
	public void setUserInput( int userInput ){
		this.userInput = userInput;
	}
	
	
	
	// METHODS
	/**
	 * selectionGenerator generates a random number from 1 to 3 that will 
	 * be used as the computer's selection.
	 * @return a random integer from 1 to 3
	 */
	private int selectionGenerator(){
		return randSelection.nextInt(3) + 1;
	}
	
	/**
	 * findWinner assigns a random number from 1 to 3 to compInput by calling selectionGenerator
	 * it then subtract the computer selection from the user selection and assigns it to diff. 
	 * Because of the order of the options elements if diff is a 0 that means that both selections
	 * were the same, if -1 or 2 the computer won, or otherwise the user won. It also keeps track
	 * of the totalGames, userWins, compWins and draws.
	 * @return a string containing "draw", "comp", "user"
	 */
	public String findWinner(){
		compInput = selectionGenerator();
		String output = "";
		int diff = userInput - compInput;
		if( diff == 0 ){
			output = "draw";
			draws++;
			totalGames++;
		}else if( diff == -1 || diff == 2 ){
			output = "comp";
			compWins++;
			totalGames++;
		}else{
			output = "user";
			userWins++;
			totalGames++;
		}
		winner = output;
		return output;
	}
	
	/**
	 * winnerMessage takes a string parameter and generates a string matching the winner of the
	 * match or a draw
	 * @param winner - winner of the match, "draw", "user" or "comp"
	 * @return a string message depending on the winner of the match
	 */
	private String winnerMessage( String winner ){
		String output;
		switch( winner ){
		case "draw" :
			output = "This game was a draw.";
			break;
		case "user" :
			output = "Good Job! You won the match.";
			break;
		default :
			output = "Sorry, the computer won the match.";
		}
		return output;
	}
	/**
	 * winningSolution takes the user's and computer's selection and base on them
	 * it returns a message for the winning solution.
	 * @param user - the user's number equivalent for Rock(1), Paper(2), Scissors(3)
	 * @param comp - the computer's number equivalent for Rock(1), Paper(2), Scissors(3)
	 * @return the winning solution as a string
	 */
	private String winningSolution( int user, int comp ){
		String output = "";
		if( user == comp ){
			output = "";
		}else if( (user == 1 || user == 2) && (comp == 1 || comp == 2) ){
			output = "Paper wraps rock. ";
		}else if( (user == 1 || user == 3) && (comp == 1 || comp == 3) ){
			output = "Rock breaks Scissors. ";
		}else{
			output = "Scissors cut paper. ";
		}
		return output;
	}
	
	/**
	 * displayResults displays a message on a dialog box with all the results
	 * of the game.
	 */
	public void displayResults(){
		String output = "Your selection: " + options[ userInput - 1 ] + "\n";
		output += "Comp selection: " + options[ compInput - 1 ] + "\n\n";
		output += winningSolution( userInput, compInput );
		output += winnerMessage( winner ) + "\n\n";
		output += "Score\n";
		output += "You: " + userWins + " Computer: " + compWins + " Draws: " + draws;
		JOptionPane.showMessageDialog( null, output );
	}

}
